{"version":3,"sources":["AskPage.tsx"],"names":["AskPage","_useForm","useForm","mode","register","errors","formState","handleSubmit","_React$useState","React","useState","_React$useState2","_slicedToArray","successfullySubmitted","setSuccessfullySubmitted","submitForm","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","result","wrap","_context","prev","next","postQuestion","title","content","userName","created","Date","sent","stop","_x","apply","arguments","_jsx","Page","children","_jsxs","onSubmit","Fieldset","disabled","isSubmitting","FieldContainer","FieldLabel","htmlFor","FieldInput","_objectSpread","required","minLength","id","name","type","FieldError","FieldTextArea","FormButtonContainer","PrimaryButton","SubmissionSuccess"],"mappings":"4OAgBaA,EAAU,WACrB,IAAAC,EAKIC,YAAkB,CACpBC,KAAM,WALNC,EAAQH,EAARG,SACaC,EAAMJ,EAAnBK,UAAaD,OACbE,EAAYN,EAAZM,aACAD,EAASL,EAATK,UAIFE,EACEC,IAAMC,UAAS,GAAMC,EAAAC,YAAAJ,EAAA,GADhBK,EAAqBF,EAAA,GAAEG,EAAwBH,EAAA,GAEhDI,EAAU,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,EAAOC,GAAc,IAAAC,EAAA,OAAAJ,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACjBC,YAAa,CAChCC,MAAOP,EAAKO,MACZC,QAASR,EAAKQ,QACdC,SAAU,OACVC,QAAS,IAAIC,OACZ,KAAD,EALIV,EAAME,EAAAS,KAMZnB,IAAyBQ,GAAuB,wBAAAE,EAAAU,OAAA,GAAAd,EAAA,KACjD,gBARee,GAAA,OAAAnB,EAAAoB,MAAA,KAAAC,UAAA,KAShB,OACEC,cAACC,IAAI,CAACX,MAAM,iBAAgBY,SAC1BC,eAAA,QAAMC,SAAUnC,EAAaQ,GAAYyB,SAAA,CACvCC,eAACE,IAAQ,CAACC,SAAUtC,EAAUuC,cAAgBhC,EAAsB2B,SAAA,CAClEC,eAACK,IAAc,CAAAN,SAAA,CACbF,cAACS,IAAU,CAACC,QAAQ,QAAOR,SAAC,UAC5BF,cAACW,IAAUC,wBAAA,GACL9C,EAAS,QAAS,CAAE+C,UAAU,EAAMC,UAAW,MAAK,IACxDC,GAAG,QACHC,KAAK,QACLC,KAAK,UAENlD,EAAOuB,OAA+B,aAAtBvB,EAAOuB,MAAM2B,MAC5BjB,cAACkB,IAAU,CAAAhB,SAAC,sCAEbnC,EAAOuB,OAA+B,cAAtBvB,EAAOuB,MAAM2B,MAC5BjB,cAACkB,IAAU,CAAAhB,SAAC,gDAGhBC,eAACK,IAAc,CAAAN,SAAA,CACbF,cAACS,IAAU,CAACC,QAAQ,UAASR,SAAC,YAC9BF,cAACmB,IAAaP,wBAAA,GACR9C,EAAS,UAAW,CAAE+C,UAAU,EAAMC,UAAW,MAAK,IAC1DC,GAAG,UACHC,KAAK,aAENjD,EAAOwB,SAAmC,aAAxBxB,EAAOwB,QAAQ0B,MAChCjB,cAACkB,IAAU,CAAAhB,SAAC,wCAEbnC,EAAOwB,SAAmC,cAAxBxB,EAAOwB,QAAQ0B,MAChCjB,cAACkB,IAAU,CAAAhB,SAAC,qDAMlBF,cAACoB,IAAmB,CAAAlB,SAClBF,cAACqB,IAAa,CAACJ,KAAK,SAAQf,SAAC,2BAE9B3B,GACCyB,cAACsB,IAAiB,CAAApB,SAAC,iDAO7B,EACexC,W","file":"static/js/3.3c7fd0f9.chunk.js","sourcesContent":["import { Page } from './Page';\nimport { postQuestion } from './QuestionsData';\nimport {\n  Fieldset,\n  FieldContainer,\n  FieldLabel,\n  FieldInput,\n  FieldTextArea,\n  FormButtonContainer,\n  PrimaryButton,\n  FieldError,\n  SubmissionSuccess,\n} from './Styles';\nimport { useForm } from 'react-hook-form';\nimport React from 'react';\n\nexport const AskPage = () => {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    formState,\n  } = useForm<FormData>({\n    mode: 'onBlur',\n  });\n  const [successfullySubmitted, setSuccessfullySubmitted] =\n    React.useState(false);\n  const submitForm = async (data: FormData) => {\n    const result = await postQuestion({\n      title: data.title,\n      content: data.content,\n      userName: 'Fred',\n      created: new Date(),\n    });\n    setSuccessfullySubmitted(result ? true : false);\n  };\n  return (\n    <Page title=\"Ask a question\">\n      <form onSubmit={handleSubmit(submitForm)}>\n        <Fieldset disabled={formState.isSubmitting || successfullySubmitted}>\n          <FieldContainer>\n            <FieldLabel htmlFor=\"title\">Title</FieldLabel>\n            <FieldInput\n              {...register('title', { required: true, minLength: 10 })}\n              id=\"title\"\n              name=\"title\"\n              type=\"text\"\n            />\n            {errors.title && errors.title.type === 'required' && (\n              <FieldError>You must enter the question title</FieldError>\n            )}\n            {errors.title && errors.title.type === 'minLength' && (\n              <FieldError>The title must be at least 10 characters</FieldError>\n            )}\n          </FieldContainer>\n          <FieldContainer>\n            <FieldLabel htmlFor=\"content\">Content</FieldLabel>\n            <FieldTextArea\n              {...register('content', { required: true, minLength: 50 })}\n              id=\"content\"\n              name=\"content\"\n            />\n            {errors.content && errors.content.type === 'required' && (\n              <FieldError>You must enter the question content</FieldError>\n            )}\n            {errors.content && errors.content.type === 'minLength' && (\n              <FieldError>\n                The content must be at least 50 characters\n              </FieldError>\n            )}\n          </FieldContainer>\n        </Fieldset>\n        <FormButtonContainer>\n          <PrimaryButton type=\"submit\">Submit Your Question</PrimaryButton>\n        </FormButtonContainer>\n        {successfullySubmitted && (\n          <SubmissionSuccess>\n            Your question was successfully submitted\n          </SubmissionSuccess>\n        )}\n      </form>\n    </Page>\n  );\n};\nexport default AskPage;\ntype FormData = {\n  title: string;\n  content: string;\n};\n"],"sourceRoot":""}